Justificativa
- grande volume de dados
- web -> maior número de requisições simultaneas
- heterogeneidade estrutural de dados
- desempenho

Nuvens
- recurso sob demanda
- boa banda (widely accessible)
- tolerância a falhas
- pagamento por uso
- facilidade na alocação de recursos
- desempenho
- recursos virtualizados


-> agora apareceram sistemas que usam dinamicamente esses recursos.

-> como os sistemas podem trabalhar em várias máquinas?
** Uma opção é particionar os dados.

-> Nos bancos de dados relacionais a gente usava transações, que eram
ACID. Como? bloqueando a tabela.
Então, como conseguimos melhor desempenho? Relaxando propriedades 
transacionais, a ACID.

-> Geralmente os NoSQL não tem a operação de join. 
** GraphQL é um exemplo de aplicação que faz o join no lado do cliente 


NoSQL - a origem
1998 (primeira aparição)
-> Carlo Strozzi, SGBD relacional leve, para SOs derivados do UNIX e 
não implementava SQL
2009 reintrodução
- popularidade do BigTable/MapReduce (Google) e do DynamoDB (Amazon)
- Novos sistemas de dados distribuídos e de código aberto.


** Queremos uma "persistência poliglota"
-> qual parte dos dados é melhor armazenada em um BD relacional ou 
não-relacional.


SGBDR ou não SGBDR
Um SGBDR provê
- eficiência
- confiabilidade
- conveniência
armazenamento e aesso seguros (para multiusuários)

Segundo Michael Stonebraker
Há duas razões principais que motivam a troca de um SGBDR por um NoSQL:
- flexibilidade
- desempenho

Dados X modelo relacional
- dados ficam organizados em relações
- há uma algebra conpreensível
- problema: e quando os dados não se encaixam nesse pacote?

Principais vantagens do NoSQL
- esquema mais flexível.
- inicialização mais rápida e barata (a maior parte dos NoSQL são 
free-software e a burocracia é menor).
- escalabilidade para grandes volumes de dados.
- consistência relaxada, que resulta em melhor desempenho e 
disponibilidade.

